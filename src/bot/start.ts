import { config } from 'dotenv';
import { BotClient } from './client';
import { connectToDatabase } from '../shared/db';
import { loadFeatures } from './handlers/feature';
import { loadEvents } from './handlers/event';
import path from 'path';
import { REST, Routes } from 'discord.js';
import chalk from 'chalk';
import fs from 'fs';
import { CronManager } from './cron';

export async function startBot() {
  try {
    // Charger les variables d'environnement
    const envPath = path.resolve(__dirname, '../../.env');
    console.log(chalk.yellow(`Tentative de chargement du fichier .env depuis: ${envPath}`));

    // V√©rifier si le fichier existe
    if (fs.existsSync(envPath)) {
      console.log(chalk.green(`‚úÖ Fichier .env trouv√© √† ${envPath}`));
      config({ path: envPath });
      
      // V√©rifier si les variables critiques sont charg√©es
      console.log(chalk.yellow('Variables d\'environnement critiques:'));
      console.log(chalk.yellow(`- DISCORD_CLIENT_ID: ${process.env.DISCORD_CLIENT_ID ? '‚úÖ' : '‚ùå'}`));
      console.log(chalk.yellow(`- DISCORD_REDIRECT_URI: ${process.env.DISCORD_REDIRECT_URI ? '‚úÖ' : '‚ùå'}`));
      console.log(chalk.yellow(`- FRONTEND_URL: ${process.env.FRONTEND_URL ? '‚úÖ' : '‚ùå'}`));
      console.log(chalk.yellow(`- VITE_API_BASE_URL: ${process.env.VITE_API_BASE_URL ? '‚úÖ' : '‚ùå'}`));
    } else {
      console.log(chalk.red(`‚ùå Fichier .env NON TROUV√â √† ${envPath}`));
    }

    // 1) Initialiser la classe
    console.log(chalk.blue.bold('üöÄ Initialisation du bot La Station...'));
    const client = await BotClient.init();

    // 2) Connexion √† MongoDB
    await connectToDatabase();
    console.log(chalk.green('‚úÖ Connexion √† MongoDB r√©ussie !'));

    // 3) Charger les √©v√©nements globaux
    const eventsPath = path.join(__dirname, 'events');
    await loadEvents(client, eventsPath);
    console.log(chalk.cyan('üìä √âv√©nements globaux charg√©s !'));

    // 4) Charger les fonctionnalit√©s
    const featuresPath = path.join(__dirname, '../features');
    await loadFeatures(client, featuresPath);

    // 5) Initialiser tous les crons
    const cronManager = new CronManager(client);
    cronManager.startAll();
    console.log(chalk.yellow('‚è∞ Cron jobs d√©marr√©s !'));

    // 6) Connexion √† Discord
    try {
      const token = process.env.DISCORD_TOKEN;
      if (!token) throw new Error("DISCORD_TOKEN n'est pas d√©fini dans l'environnement");

      await client.login(token);

      // 7) Auto-d√©ploiement des slash commands (optionnel)
      if (process.env.AUTO_DEPLOY_COMMANDS === 'true') {
        const slashCommands = Array.from(client.slashCommands.values());
        if (slashCommands.length > 0) {
          console.log(`D√©ploiement de ${slashCommands.length} slash commands...`);
          const rest = new REST({ version: '10' }).setToken(token);

          // Supprimer toutes les commandes existantes
          try {
            if (process.env.GUILD_ID) {
              await rest.put(
                Routes.applicationGuildCommands(client.user?.id || '', process.env.GUILD_ID),
                { body: [] }
              );
              console.log(chalk.red("Anciennes commandes supprim√©es pour la guild !"));
            } else {
              await rest.put(
                Routes.applicationCommands(client.user?.id || ''),
                { body: [] }
              );
              console.log("Anciennes commandes supprim√©es globalement !");
            }
          } catch (error) {
            console.error("Erreur lors de la suppression des anciennes commandes:", error);
          }

          // D√©ployer les nouvelles commandes
          const commandsData = slashCommands.map(cmd => cmd.data.toJSON());

          if (process.env.GUILD_ID) {
            await rest.put(
              Routes.applicationGuildCommands(client.user?.id || '', process.env.GUILD_ID),
              { body: commandsData }
            );
            console.log("Commandes Slash d√©ploy√©es pour la guild !");
          } else {
            await rest.put(
              Routes.applicationCommands(client.user?.id || ''),
              { body: commandsData }
            );
            console.log("Commandes Slash d√©ploy√©es globalement !");
          }
          console.log('Slash commands enregistr√©es avec succ√®s!');
        } else {
          console.log("Aucune slash command √† d√©ployer.");
        }
      }
    } catch (error) {
      console.error('Erreur lors de la connexion √† Discord:', error);
      throw error;
    }

    return client;
  } catch (error) {
    console.error('Erreur lors du d√©marrage du bot:', error);
    throw error;
  }
} 